function [rs, rt, rsz, rtz, rss, rtt, rst, rzz] = densjmd95_bsq_second_derivs(s, t, z)
%DENSJMD95_BSQ_SECOND_DERIVS  Boussinesq partial derivatives up to second order of JMD95 in-situ density.
%
%
% [rs, rt, rsz, rtz] = densjmd95_bsq_second_derivs(s,t,z) 
% computes, from the practical salinity s, potential temperature t, and
% depth z, the partial derivatives of JMD95 in-situ density with respect to
% s, t, (s,z), and (t,z).  The depth z is converted into hydrostatic
% pressure for a given gravitational acceleration and Boussinesq reference
% density, which are hard-coded into this function (edit variables grav and
% rhob as needed).
%
% Code for other partial derivatives is included.  Uncomment and edit as
% needed.
%
% This function is derived from densjmd95.m, documented below. Input checks
% and expansion of variables have been removed; instead automatic expansion
% (requiring MATLAB 2016b or later) is used. The calculation has also been
% streamlined by pre-allocating arrays for coeffcients, and modifying the
% coefficients such that pressure need not be internally converted from
% dbar to bar. This function is compatible with MATLAB's codegen.
%
% The input's and outputs' units are as in densjmd95, documented below.
%
% The input's sizes are more general: they may be arrays of any dimension
% and any size, so long as their sizes match each other excepting that any
% input can have any dimension as a singleton. For example, s and t can be
% 3D arrays of size [nz, nx, ny], while z can be a vector of size [nz,1].
%
% Author(s)       : Geoff Stanley
% Email           : g.stanley@unsw.edu.au
% Email           : geoffstanley@gmail.com
% Version         : 1.0
%
%
% DENSJMD95    Density of sea water
%=========================================================================
%
% USAGE:  dens = densjmd95(s,Theta,P)
%
% DESCRIPTION:
%    Density of Sea Water using Jackett and McDougall 1995 (JAOT 12)
%    polynomial (modified UNESCO polynomial).
%
% INPUT:  (all must have same dimensions)
%   s     = salinity    [psu      (PSS-78)]
%   Theta = potential temperature [degree C (IPTS-68)]
%   P     = pressure    [dbar]
%       (P may have dims 1x1, mx1, 1xn or mxn for s(mxn) )
%
% OUTPUT:
%   dens = density  [kg/m^3]
%
% AUTHOR:  Martin Losch 2002-08-09  (mlosch@mit.edu)
%
% check value
% s     = 35.5 PSU
% Theta = 3 degC
% P     = 3000 dbar
% rho   = 1041.83267 kg/m^3


% Jackett and McDougall, 1995, JAOT 12(4), pp. 381-388

% created by mlosch on 2002-08-09
% $Header: /u/gcmpack/MITgcm/utils/matlab/densjmd95.m,v 1.2 2007/02/17 23:49:43 jmc Exp $
% $Name:  $
%----------------------
% INPUT CHECKS REMOVED
%----------------------

% Convert depth [m] to the hydrostatic pressure [dbar] implied by the
% following two hard-coded parameters (edit as needed):
grav = 9.81;  % gravitational acceleration [m /s^2]
rhob = 1035;  % Boussinesq reference density [kg / m^3]
Pa2db = 1e-4; % Pascal to dbar conversion [dbar / Pa]
Z2P = (Pa2db * grav * rhob); % depth to pressure conversion [dbar / m]
z = z * Z2P;  % Henceforth z is actually pressure [dbar]

% coefficients nonlinear equation of state in pressure coordinates for
% 1. density of fresh water at p = 0
eosJMDCFw = zeros(6,1);
eosJMDCFw(1) =  999.842594;
eosJMDCFw(2) =    6.793952e-02;
eosJMDCFw(3) = -  9.095290e-03;
eosJMDCFw(4) =    1.001685e-04;
eosJMDCFw(5) = -  1.120083e-06;
eosJMDCFw(6) =    6.536332e-09;
% 2. density of sea water at p = 0
eosJMDCSw = zeros(9,1);
eosJMDCSw(1) =    8.244930e-01;
eosJMDCSw(2) = -  4.089900e-03;
eosJMDCSw(3) =    7.643800e-05;
eosJMDCSw(4) = -  8.246700e-07;
eosJMDCSw(5) =    5.387500e-09;
eosJMDCSw(6) = -  5.724660e-03;
eosJMDCSw(7) =    1.022700e-04;
eosJMDCSw(8) = -  1.654600e-06;
eosJMDCSw(9) =    4.831400e-04;

% coefficients in pressure coordinates for
% 3. secant bulk modulus K of fresh water at p = 0
eosJMDCKFw = zeros(5,1);
eosJMDCKFw(1) =   1.965933e+05; % == original * 10
eosJMDCKFw(2) =   1.444304e+03; % == original * 10
eosJMDCKFw(3) = - 1.706103e+01; % == original * 10
eosJMDCKFw(4) =   9.648704e-02; % == original * 10
eosJMDCKFw(5) = - 4.190253e-04; % == original * 10
% 4. secant bulk modulus K of sea water at p = 0
eosJMDCKSw = zeros(7,1);
eosJMDCKSw(1) =   5.284855e+02; % == original * 10
eosJMDCKSw(2) = - 3.101089e+00; % == original * 10
eosJMDCKSw(3) =   6.283263e-02; % == original * 10
eosJMDCKSw(4) = - 5.084188e-04; % == original * 10
eosJMDCKSw(5) =   3.886640e+00; % == original * 10
eosJMDCKSw(6) =   9.085835e-02; % == original * 10
eosJMDCKSw(7) = - 4.619924e-03; % == original * 10
% 5. secant bulk modulus K of sea water at p
eosJMDCKP = zeros(14,1);
eosJMDCKP( 1) =   3.186519e+00;
eosJMDCKP( 2) =   2.212276e-02;
eosJMDCKP( 3) = - 2.984642e-04;
eosJMDCKP( 4) =   1.956415e-06;
eosJMDCKP( 5) =   6.704388e-03;
eosJMDCKP( 6) = - 1.847318e-04;
eosJMDCKP( 7) =   2.059331e-07;
eosJMDCKP( 8) =   1.480266e-04;
eosJMDCKP( 9) =   2.102898e-05; % == original / 10
eosJMDCKP(10) = - 1.202016e-06; % == original / 10
eosJMDCKP(11) =   1.394680e-08; % == original / 10
eosJMDCKP(12) = - 2.040237e-07; % == original / 10
eosJMDCKP(13) =   6.128773e-09; % == original / 10
eosJMDCKP(14) =   6.207323e-11; % == original / 10


t2 = t.*t;
t3 = t2.*t;
t4 = t3.*t;

s1o2 = sqrt(s);
s3o2 = s.*s1o2;

sn1o2 = 1 ./ s1o2; % == s .^ (-1/2)

z2 = z.*z;

br = 1 ./ ( ...       % from here, secant bulk modulus of fresh water at the surface
    + eosJMDCKFw(1) + eosJMDCKFw(2)*t + eosJMDCKFw(3)*t2 + eosJMDCKFw(4)*t3 + eosJMDCKFw(5)*t4 ...
    + s .* ( ...    % from here, secant bulk modulus of sea water at the surface
    eosJMDCKSw(1) + eosJMDCKSw(2)*t + eosJMDCKSw(3)*t2 + eosJMDCKSw(4)*t3 ...
    ) ...
    + s3o2 .* ( ...
    eosJMDCKSw(5) + eosJMDCKSw(6)*t + eosJMDCKSw(7)*t2 ...
    ) ...
    + z .* ( ...    % from here, secant bulk modulus of sea water at pressure p
    eosJMDCKP(1) + eosJMDCKP(2)*t + eosJMDCKP(3)*t2 + eosJMDCKP(4)*t3 ...
    ) ...
    + z .* s .* ( ...
    eosJMDCKP(5) + eosJMDCKP(6)*t + eosJMDCKP(7)*t2 ...
    ) ...
    + z .* s3o2 * eosJMDCKP(8) ...
    + z2 .* ( ...
    eosJMDCKP(9) + eosJMDCKP(10)*t + eosJMDCKP(11)*t2 ...
    ) ...
    + z2 .* s .* ( ...
    eosJMDCKP(12) + eosJMDCKP(13)*t + eosJMDCKP(14)*t2 ...
    ) ...
    );

% --- Derivatives of the secant bulk modulus
b_s = ...
    + (   eosJMDCKSw(1) ...
    + eosJMDCKSw(2)*t ...
    + eosJMDCKSw(3)*t2 ...
    + eosJMDCKSw(4)*t3 ...
    ) ...
    + 3/2*s1o2.*(   eosJMDCKSw(5) ...
    + eosJMDCKSw(6)*t ...
    + eosJMDCKSw(7)*t2 ...
    ) ...
    + z.*(   eosJMDCKP(5) ...
    + eosJMDCKP(6)*t ...
    + eosJMDCKP(7)*t2 ...
    ) ...
    + z.*s1o2*3/2*eosJMDCKP(8) ...
    + z2.*(   eosJMDCKP(12) ...
    + eosJMDCKP(13)*t ...
    + eosJMDCKP(14)*t2 ...
    );

b_t = ...
    + eosJMDCKFw(2) ...
    + eosJMDCKFw(3)*2*t ...
    + eosJMDCKFw(4)*3*t2 ...
    + eosJMDCKFw(5)*4*t3 ...
    + s.*( ...
    + eosJMDCKSw(2) ...
    + eosJMDCKSw(3)*2*t ...
    + eosJMDCKSw(4)*3*t2 ...
    ) ...
    + s3o2.*( ...
    + eosJMDCKSw(6) ...
    + eosJMDCKSw(7)*2*t ...
    ) ...
    + z.*( ...
    + eosJMDCKP(2) ...
    + eosJMDCKP(3)*2*t ...
    + eosJMDCKP(4)*3*t2 ...
    ) ...
    + z.*s.*( ...
    + eosJMDCKP(6) ...
    + eosJMDCKP(7)*2*t ...
    ) ...
    + z2.*( ...
    + eosJMDCKP(10) ...
    + eosJMDCKP(11)*2*t ...
    ) ...
    + z2.*s.*( ...
    + eosJMDCKP(13) ...
    + eosJMDCKP(14)*2*t ...
    );


b_p = + ( ...
    eosJMDCKP(1) + eosJMDCKP(2)*t + eosJMDCKP(3)*t2 + eosJMDCKP(4)*t3 ...
    ) ...
    + s .* ( ...
    eosJMDCKP(5) + eosJMDCKP(6)*t + eosJMDCKP(7)*t2 ...
    ) ...
    + s3o2 * eosJMDCKP(8) ...
    + 2*z .* ( ...
    eosJMDCKP(9) + eosJMDCKP(10)*t + eosJMDCKP(11)*t2 ...
    ) ...
    + 2*z .* s .* ( ...
    eosJMDCKP(12) + eosJMDCKP(13)*t + eosJMDCKP(14)*t2 ...
    );


b_ss = ...
    + 3/4 .* sn1o2.*(   eosJMDCKSw(5) ...
    + eosJMDCKSw(6)*t ...
    + eosJMDCKSw(7)*t2 ...
    ) ...
    + z.*sn1o2*3/4*eosJMDCKP(8);


b_st = ( ...
    + eosJMDCKSw(2) ...
    + 2*eosJMDCKSw(3)*t ...
    + 3*eosJMDCKSw(4)*t2 ...
    ) ...
    + 3/2*s1o2.*( ...
    + eosJMDCKSw(6) ...
    + 2*eosJMDCKSw(7)*t ...
    ) ...
    + z.*( ...
    + eosJMDCKP(6) ...
    + 2*eosJMDCKP(7)*t ...
    ) ...
    + z2.*( ...
    + eosJMDCKP(13) ...
    + 2*eosJMDCKP(14)*t ...
    );


b_tt = ...
    + eosJMDCKFw(3)*2 ...
    + eosJMDCKFw(4)*6*t ...
    + eosJMDCKFw(5)*12*t2 ...
    + s.*( ...
    + eosJMDCKSw(3)*2 ...
    + eosJMDCKSw(4)*6*t ...
    ) ...
    + s3o2.*( ...
    + eosJMDCKSw(7)*2 ...
    ) ...
    + z.*( ...
    + eosJMDCKP(3)*2 ...
    + eosJMDCKP(4)*6*t ...
    ) ...
    + z.*s.*( ...
    + eosJMDCKP(7)*2 ...
    ) ...
    + z2.*( ...
    + eosJMDCKP(11)*2 ...
    ) ...
    + z2.*s.*( ...
    + eosJMDCKP(14)*2 ...
    );

b_sp = ...
    + ( ...
    eosJMDCKP(5) + eosJMDCKP(6)*t + eosJMDCKP(7)*t2 ...
    ) ...
    + 3/2 * s1o2 * eosJMDCKP(8) ...
    + 2*z .* ( ...
    eosJMDCKP(12) + eosJMDCKP(13)*t + eosJMDCKP(14)*t2 ...
    );

b_tp = ...
    + ( ...
    eosJMDCKP(2) + 2*eosJMDCKP(3)*t + 3*eosJMDCKP(4)*t2 ...
    ) ...
    + s .* ( ...
    eosJMDCKP(6) + 2*eosJMDCKP(7)*t ...
    ) ...
    + 2*z .* ( ...
    eosJMDCKP(10) + 2*eosJMDCKP(11)*t ...
    ) ...
    + 2*z .* s .* ( ...
    eosJMDCKP(13) + 2*eosJMDCKP(14)*t ...
    );

b_pp = ...
    + 2 .* ( ...
    eosJMDCKP(9) + eosJMDCKP(10)*t + eosJMDCKP(11)*t2 ...
    ) ...
    + 2 .* s .* ( ...
    eosJMDCKP(12) + eosJMDCKP(13)*t + eosJMDCKP(14)*t2 ...
    );

% b_ppp = 0;



% --- r0 = in-situ density at surface (i.e. p = 0) and its derivatives
r0 = ...              % from here, density of freshwater at the surface
    + eosJMDCFw(1) + eosJMDCFw(2)*t + eosJMDCFw(3)*t2 + eosJMDCFw(4)*t3 + eosJMDCFw(5)*t4 + eosJMDCFw(6)*t4.*t ...
    + s .* ( ...            % from here down, density of sea water at the surface
    eosJMDCSw(1) + eosJMDCSw(2)*t + eosJMDCSw(3)*t2 + eosJMDCSw(4)*t3 + eosJMDCSw(5)*t4 ) ...
    + s3o2 .* ( ...
    eosJMDCSw(6) + eosJMDCSw(7)*t + eosJMDCSw(8)*t2 ) ...
    + s .* s * eosJMDCSw(9);

r0_s = ...
    + ( ...
    eosJMDCSw(1) ...
    + eosJMDCSw(2)*t ...
    + eosJMDCSw(3)*t2 ...
    + eosJMDCSw(4)*t3 ...
    + eosJMDCSw(5)*t4 ...
    ) ...
    + 3/2*s1o2.*( ...
    eosJMDCSw(6) ...
    + eosJMDCSw(7)*t ...
    + eosJMDCSw(8)*t2 ...
    ) ...
    + 2*eosJMDCSw(9)*s;

r0_t = ...
    + eosJMDCFw(2) ...
    + eosJMDCFw(3)*2*t ...
    + eosJMDCFw(4)*3*t2 ...
    + eosJMDCFw(5)*4*t3 ...
    + eosJMDCFw(6)*5*t4 ...
    + s.*( ...
    + eosJMDCSw(2) ...
    + eosJMDCSw(3)*2*t ...
    + eosJMDCSw(4)*3*t2 ...
    + eosJMDCSw(5)*4*t3 ...
    ) ...
    + s3o2.*( ...
    + eosJMDCSw(7) ...
    + eosJMDCSw(8)*2*t ...
    ) ;

r0_ss = ...
    + 3/4 .* sn1o2.*( ...
    eosJMDCSw(6) ...
    + eosJMDCSw(7)*t ...
    + eosJMDCSw(8)*t2 ...
    ) ...
    + 2*eosJMDCSw(9);

r0_tt = ...
    + eosJMDCFw(3)*2 ...
    + eosJMDCFw(4)*6*t ...
    + eosJMDCFw(5)*12*t2 ...
    + eosJMDCFw(6)*20*t3 ...
    + s.*( ...
    + eosJMDCSw(3)*2 ...
    + eosJMDCSw(4)*6*t ...
    + eosJMDCSw(5)*12*t2 ...
    ) ...
    + s3o2.*( ...
    + eosJMDCSw(8)*2 ...
    ) ;

r0_st = ...
    + ( eosJMDCSw(2) ...
    + 2*eosJMDCSw(3)*t ...
    + 3*eosJMDCSw(4)*t2 ...
    + 4*eosJMDCSw(5)*t3 ...
    ) ...
    + 3/2*s1o2.*( ...
    + eosJMDCSw(7) ...
    + 2*eosJMDCSw(8)*t ...
    ) ;

%r0_sp = 0;
%r0_tp = 0;

% Miscillaneous helpful terms:
pbr2 = z .* br .* br;
iPonB = 1 ./ (1 - z .* br);
A = (br - pbr2 .* b_p);


% Density and its derivatives
% Below, multiplication Z2P undoes conversion from [m] to [dbar]
r = r0 .* iPonB;

rs = (r0_s - r .* pbr2 .* b_s) .* iPonB;

rt = (r0_t - r .* pbr2 .* b_t) .* iPonB;

% rz = r .* iPonB .* (br - pbr2 .* b_p) * Z2P; 

rsz = (rs .* A ...
    +  r .* ( -br.*br.*b_s + 2*pbr2.*br.*b_s.*b_p - pbr2.*b_sp - iPonB .* A .* pbr2 .* b_s ) ...
    ) .* iPonB * Z2P; 

rtz = (rt .* A ...
    +  r .* ( -br.*br.*b_t + 2*pbr2.*br.*b_t.*b_p - pbr2.*b_tp - iPonB .* A .* pbr2 .* b_t ) ...
    ) .* iPonB * Z2P; 


rss = (r0_ss ...
    - 2 * r0_s .* b_s .* pbr2 .* iPonB ...
    + r .* pbr2 .* ( 2 .* b_s.^2 .* br .* iPonB - b_ss ) ...
    ) .* iPonB;

rst = (r0_st ...
    - ( r0_s .* b_t + r0_t .* b_s ) .* pbr2 .* iPonB ...
    + r .* pbr2 .* ( 2 .* b_t .* b_s .* br .* iPonB - b_st ) ...
    ) .* iPonB;

rtt = (r0_tt ...
    - 2 * r0_t .* b_t .* pbr2 .* iPonB ...
    + r .* pbr2 .* ( 2 .* b_t.^2 .* br .* iPonB - b_tt ) ...
    ) .* iPonB;

rzz = r .* iPonB .* ( ...
    -2*br.*br.*b_p + 2*pbr2.*br.*b_p.*b_p - pbr2.*b_pp + 2*A.*A.*iPonB ...
    ) * Z2P^2;  


end