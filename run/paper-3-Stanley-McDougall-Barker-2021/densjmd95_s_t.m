function [rs, rt] = densjmd95_s_t(s, t, p)



% Doc copied from densjmd95_dstp

% Compute any partial derivative of the in-situ density given by densjmd95
% derivs is a cell array of strings. The i'th output is the partial derivative
% of in-situ density given by derivs{i}, specified as 'dsAdtBdpC' to obtain
% the partial derivative of A'th order in salinity, B'th order in potential
% temperature, and C'th order in pressure.
% This function is coded for efficiency rather than memory footprint:
% computations are saved and re-used wherever possible.
% Currently only coded up to second order in any variable.
% Geoff Stanley, geoff.stanley@physics.ox.ac.uk
%
%
% densjmd95_dstp    Derivatives of density of sea water
%=========================================================================
%
% USAGE:  [d1,...,dn] = densjmd95_dstp(S,Theta,P,{s1,...,sn})
% USAGE:  out         = densjmd95_dstp(S,Theta,P,{s1,...,sn})
%
% DESCRIPTION:
%    Requested derivatives of the Density of Sea Water using Jackett and
%    McDougall 1995 (JAOT 12) polynomial (modified UNESCO polynomial).
%    Currently only derivatives up to second order are coded.
%
% INPUT:
%   s = salinity    [psu      (PSS-78)]
%   t = potential temperature [degree C (IPTS-68)]
%   p = pressure    [dbar]
%   derivs = Specification of which derivatives to compute.
%            {s1,...,sn}, i.e. a cell array of strings s1, ..., sn. Each si
%            is of the form 'ds#dt#dp#'. The in-situ density, for example,
%            is obtained with 'ds0dt0dp0'.
%
% INPUT DIMENSIONS:
%   s,t,p must have the same dimensions, or be expandable to have the same
%   dimensions as the others.
%
% OUTPUT:
%   [d1, ..., dn]. di is the derivative of in-situ density with respect to
%                  the variables specified in si. The units of in-situ
%                  density are [kg / m^3].
%
% ALTERNATE OUTPUT:
%   out = struct containing the requested derivatives. The field names
%         are s1,...,sn.
%

% AUTHOR:  Geoff Stanley 01/02/2017 (geoff.stanley@physics.ox.ac.uk)
%
% check value for in-situ density (no derivatives, ie. ds0dt0dp0
% S     = 35.5 PSU
% Theta = 3 degC
% P     = 3000 dbar
% rho   = 1041.83267 kg/m^3

% Jackett and McDougall, 1995, JAOT 12(4), pp. 381-388

% Created by Geoff Stanley on Feb 01 2017
% Based on the original densjmd95.m by mlosch on 2002-08-09


% convert pressure to bar
p = .1*p;

% coefficients nonlinear equation of state in pressure coordinates for
% 1. density of fresh water at p = 0
eosJMDCFw(1) =  999.842594;
eosJMDCFw(2) =    6.793952e-02;
eosJMDCFw(3) = -  9.095290e-03;
eosJMDCFw(4) =    1.001685e-04;
eosJMDCFw(5) = -  1.120083e-06;
eosJMDCFw(6) =    6.536332e-09;
% 2. density of sea water at p = 0
eosJMDCSw(1) =    8.244930e-01;
eosJMDCSw(2) = -  4.089900e-03;
eosJMDCSw(3) =    7.643800e-05 ;
eosJMDCSw(4) = -  8.246700e-07;
eosJMDCSw(5) =    5.387500e-09;
eosJMDCSw(6) = -  5.724660e-03;
eosJMDCSw(7) =    1.022700e-04;
eosJMDCSw(8) = -  1.654600e-06;
eosJMDCSw(9) =    4.831400e-04;

% coefficients in pressure coordinates for
% 3. secant bulk modulus K of fresh water at p = 0
eosJMDCKFw(1) =   1.965933e+04;
eosJMDCKFw(2) =   1.444304e+02;
eosJMDCKFw(3) = - 1.706103e+00;
eosJMDCKFw(4) =   9.648704e-03;
eosJMDCKFw(5) = - 4.190253e-05;
% 4. secant bulk modulus K of sea water at p = 0
eosJMDCKSw(1) =   5.284855e+01;
eosJMDCKSw(2) = - 3.101089e-01;
eosJMDCKSw(3) =   6.283263e-03;
eosJMDCKSw(4) = - 5.084188e-05;
eosJMDCKSw(5) =   3.886640e-01;
eosJMDCKSw(6) =   9.085835e-03;
eosJMDCKSw(7) = - 4.619924e-04;
% 5. secant bulk modulus K of sea water at p
eosJMDCKP( 1) =   3.186519e+00;
eosJMDCKP( 2) =   2.212276e-02;
eosJMDCKP( 3) = - 2.984642e-04;
eosJMDCKP( 4) =   1.956415e-06;
eosJMDCKP( 5) =   6.704388e-03;
eosJMDCKP( 6) = - 1.847318e-04;
eosJMDCKP( 7) =   2.059331e-07;
eosJMDCKP( 8) =   1.480266e-04;
eosJMDCKP( 9) =   2.102898e-04;
eosJMDCKP(10) = - 1.202016e-05;
eosJMDCKP(11) =   1.394680e-07;
eosJMDCKP(12) = - 2.040237e-06;
eosJMDCKP(13) =   6.128773e-08;
eosJMDCKP(14) =   6.207323e-10;


t2 = t.*t;
t3 = t2.*t;
t4 = t3.*t;

s1o2 = sqrt(s);
s3o2 = s.*s1o2;

p2 = p.*p;

br = 1 ./ ( ...       % from here, secant bulk modulus of fresh water at the surface
    + eosJMDCKFw(1) + eosJMDCKFw(2)*t + eosJMDCKFw(3)*t2 + eosJMDCKFw(4)*t3 + eosJMDCKFw(5)*t4 ...
    + s .* ( ...    % from here, secant bulk modulus of sea water at the surface
    eosJMDCKSw(1) + eosJMDCKSw(2)*t + eosJMDCKSw(3)*t2 + eosJMDCKSw(4)*t3 ...
    ) ...
    + s3o2 .* ( ...
    eosJMDCKSw(5) + eosJMDCKSw(6)*t + eosJMDCKSw(7)*t2 ...
    ) ...
    + p .* ( ...    % from here, secant bulk modulus of sea water at pressure p
    eosJMDCKP(1) + eosJMDCKP(2)*t + eosJMDCKP(3)*t2 + eosJMDCKP(4)*t3 ...
    ) ...
    + p .* s .* ( ...
    eosJMDCKP(5) + eosJMDCKP(6)*t + eosJMDCKP(7)*t2 ...
    ) ...
    + p .* s3o2 * eosJMDCKP(8) ...
    + p2 .* ( ...
    eosJMDCKP(9) + eosJMDCKP(10)*t + eosJMDCKP(11)*t2 ...
    ) ...
    + p2 .* s .* ( ...
    eosJMDCKP(12) + eosJMDCKP(13)*t + eosJMDCKP(14)*t2 ...
    ) ...
    );

% --- Derivatives of the secant bulk modulus
b_s = ...
    + (   eosJMDCKSw(1) ...
    + eosJMDCKSw(2)*t ...
    + eosJMDCKSw(3)*t2 ...
    + eosJMDCKSw(4)*t3 ...
    ) ...
    + 3/2*s1o2.*(   eosJMDCKSw(5) ...
    + eosJMDCKSw(6)*t ...
    + eosJMDCKSw(7)*t2 ...
    ) ...
    + p.*(   eosJMDCKP(5) ...
    + eosJMDCKP(6)*t ...
    + eosJMDCKP(7)*t2 ...
    ) ...
    + p.*s1o2*3/2*eosJMDCKP(8) ...
    + p2.*(   eosJMDCKP(12) ...
    + eosJMDCKP(13)*t ...
    + eosJMDCKP(14)*t2 ...
    );

b_t = ...
    + eosJMDCKFw(2) ...
    + eosJMDCKFw(3)*2*t ...
    + eosJMDCKFw(4)*3*t2 ...
    + eosJMDCKFw(5)*4*t3 ...
    + s.*( ...
    + eosJMDCKSw(2) ...
    + eosJMDCKSw(3)*2*t ...
    + eosJMDCKSw(4)*3*t2 ...
    ) ...
    + s3o2.*( ...
    + eosJMDCKSw(6) ...
    + eosJMDCKSw(7)*2*t ...
    ) ...
    + p.*( ...
    + eosJMDCKP(2) ...
    + eosJMDCKP(3)*2*t ...
    + eosJMDCKP(4)*3*t2 ...
    ) ...
    + p.*s.*( ...
    + eosJMDCKP(6) ...
    + eosJMDCKP(7)*2*t ...
    ) ...
    + p2.*( ...
    + eosJMDCKP(10) ...
    + eosJMDCKP(11)*2*t ...
    ) ...
    + p2.*s.*( ...
    + eosJMDCKP(13) ...
    + eosJMDCKP(14)*2*t ...
    );


% b_p = + ( ...
%     eosJMDCKP(1) + eosJMDCKP(2)*t + eosJMDCKP(3)*t2 + eosJMDCKP(4)*t3 ...
%     ) ...
%     + s .* ( ...
%     eosJMDCKP(5) + eosJMDCKP(6)*t + eosJMDCKP(7)*t2 ...
%     ) ...
%     + s3o2 * eosJMDCKP(8) ...
%     + 2*p .* ( ...
%     eosJMDCKP(9) + eosJMDCKP(10)*t + eosJMDCKP(11)*t2 ...
%     ) ...
%     + 2*p .* s .* ( ...
%     eosJMDCKP(12) + eosJMDCKP(13)*t + eosJMDCKP(14)*t2 ...
%     );




% --- r0 = in-situ density at surface (i.e. p = 0) and its derivatives
r0 = ...              % from here, density of freshwater at the surface
    + eosJMDCFw(1) + eosJMDCFw(2)*t + eosJMDCFw(3)*t2 + eosJMDCFw(4)*t3 + eosJMDCFw(5)*t4 + eosJMDCFw(6)*t4.*t ...
    + s .* ( ...            % from here down, density of sea water at the surface
    eosJMDCSw(1) + eosJMDCSw(2)*t + eosJMDCSw(3)*t2 + eosJMDCSw(4)*t3 + eosJMDCSw(5)*t4 ) ...
    + s3o2 .* ( ...
    eosJMDCSw(6) + eosJMDCSw(7)*t + eosJMDCSw(8)*t2 ) ...
    + s .* s * eosJMDCSw(9);

r0_s = ...
    + ( ...
    eosJMDCSw(1) ...
    + eosJMDCSw(2)*t ...
    + eosJMDCSw(3)*t2 ...
    + eosJMDCSw(4)*t3 ...
    + eosJMDCSw(5)*t4 ...
    ) ...
    + 3/2*s1o2.*( ...
    eosJMDCSw(6) ...
    + eosJMDCSw(7)*t ...
    + eosJMDCSw(8)*t2 ...
    ) ...
    + 2*eosJMDCSw(9)*s;

r0_t = ...
    + eosJMDCFw(2) ...
    + eosJMDCFw(3)*2*t ...
    + eosJMDCFw(4)*3*t2 ...
    + eosJMDCFw(5)*4*t3 ...
    + eosJMDCFw(6)*5*t4 ...
    + s.*( ...
    + eosJMDCSw(2) ...
    + eosJMDCSw(3)*2*t ...
    + eosJMDCSw(4)*3*t2 ...
    + eosJMDCSw(5)*4*t3 ...
    ) ...
    + s3o2.*( ...
    + eosJMDCSw(7) ...
    + eosJMDCSw(8)*2*t ...
    ) ;

% Miscillaneous helpful terms:
pbr2 = p .* br .* br;
iPonB = 1 ./ (1 - p .* br);


% Density and its derivatives
r = r0 .* iPonB;

rs = (r0_s - r .* pbr2 .* b_s) .* iPonB;

rt = (r0_t - r .* pbr2 .* b_t) .* iPonB;

% rp = r .* iPonB .* (br - pbr2 .* b_p) * 0.1; % * .1 undoes the conversion to bar

end